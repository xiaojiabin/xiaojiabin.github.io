(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{417:function(e,t,a){"use strict";a.r(t);var n=a(45),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#_1-图片懒加载问题"}},[e._v("1.图片懒加载问题")])]),a("li",[a("a",{attrs:{href:"#_2-替换日期格式-zz-yy-xxxx-替换成-xxxx-zz-yy"}},[e._v("2. 替换日期格式，zz-yy-xxxx 替换成 xxxx-zz-yy")])]),a("li",[a("a",{attrs:{href:"#_3-js-是一门面向对象的语言-说说面向对象语言的三大特征"}},[e._v("3. JS 是一门面向对象的语言，说说面向对象语言的三大特征？")])]),a("li",[a("a",{attrs:{href:"#_4-js-函数中的继承主要是继承什么-可以继承函数体吗-原因是啥"}},[e._v("4. js 函数中的继承主要是继承什么？可以继承函数体吗？原因是啥")])]),a("li",[a("a",{attrs:{href:"#_5-声明一个-fn-函数-并对其使用-typeof-结果返回什么-然后给-fn-添加一个属性-会报错不-为什么"}},[e._v("5. 声明一个 fn 函数，并对其使用 typeof 结果返回什么，然后给 fn 添加一个属性，会报错不，为什么?")])]),a("li",[a("a",{attrs:{href:"#_6-定义一个字符串-对这个字符串使用-typeof-结果返回什么-既然返回了-string-字符串-而属性和方法是对象才有的-哪为什么可以在我定义的字符串上使用-split、join-、和-length-方法"}},[e._v("6. 定义一个字符串，对这个字符串使用 typeof，结果返回什么？既然返回了 string 字符串，而属性和方法是对象才有的，哪为什么可以在我定义的字符串上使用 split、join()、和 length 方法")])]),a("li",[a("a",{attrs:{href:"#_7-我有一段文字-但不知道具体有多少字-我怎么实现单行的话居中显示-多行的话就靠左显示"}},[e._v("7. 我有一段文字，但不知道具体有多少字，我怎么实现单行的话居中显示，多行的话就靠左显示？")])]),a("li",[a("a",{attrs:{href:"#_8-我想实现一段动画-我有哪些可选的实现方式-一段流畅的动画帧与帧之间间隔有什么要求"}},[e._v("8. 我想实现一段动画，我有哪些可选的实现方式？一段流畅的动画帧与帧之间间隔有什么要求？")])]),a("li",[a("a",{attrs:{href:"#_9-什么是-mvvm"}},[e._v("9. 什么是 mvvm?")])]),a("li",[a("a",{attrs:{href:"#_10-什么是-spa-单页面-它的优缺点分别是什么"}},[e._v("10. 什么是 SPA 单页面，它的优缺点分别是什么")])]),a("li",[a("a",{attrs:{href:"#_11-生命周期"}},[e._v("11. 生命周期")])]),a("li",[a("a",{attrs:{href:"#_12-v-show-与-v-if-的区别"}},[e._v("12. v-show 与 v-if 的区别")])]),a("li",[a("a",{attrs:{href:"#_13-vue-的单向数据流"}},[e._v("13. Vue 的单向数据流")])]),a("li",[a("a",{attrs:{href:"#_14-异步请求适合在哪个生命周期调用"}},[e._v("14. 异步请求适合在哪个生命周期调用？")])]),a("li",[a("a",{attrs:{href:"#_16-8-什么是-ssr"}},[e._v("16. 8.什么是 SSR")])]),a("li",[a("a",{attrs:{href:"#_17-vue-路由"}},[e._v("17. Vue 路由")])]),a("li",[a("a",{attrs:{href:"#_18-你有对-vue-项目进行哪些优化"}},[e._v("18. 你有对 Vue 项目进行哪些优化？")])]),a("li",[a("a",{attrs:{href:"#_19-vue-中的-key-有什么作用"}},[e._v("19. Vue 中的 key 有什么作用？")])]),a("li",[a("a",{attrs:{href:"#_20-虚拟-dom-实现原理"}},[e._v("20. 虚拟 DOM 实现原理")])]),a("li",[a("a",{attrs:{href:"#_21-虚拟-dom-的优缺点"}},[e._v("21. 虚拟 DOM 的优缺点")])]),a("li",[a("a",{attrs:{href:"#_22-proxy-与-object-defineproperty-优劣对比"}},[e._v("22. Proxy 与 Object.defineProperty 优劣对比")])]),a("li",[a("a",{attrs:{href:"#_23-computed-和-watch"}},[e._v("23. Computed 和 Watch")])]),a("li",[a("a",{attrs:{href:"#_24-vue2-x-中如何监测数组变化"}},[e._v("24. vue2.x 中如何监测数组变化")])]),a("li",[a("a",{attrs:{href:"#_25-vue-框架怎么实现对象和数组的监听"}},[e._v("25. Vue 框架怎么实现对象和数组的监听？")])]),a("li",[a("a",{attrs:{href:"#_26-vue-是如何实现数据双向绑定的"}},[e._v("26. Vue 是如何实现数据双向绑定的")])]),a("li",[a("a",{attrs:{href:"#_27-v-model-的原理"}},[e._v("27. v-model 的原理")])]),a("li",[a("a",{attrs:{href:"#_28-组件中-data-为什么是一个函数"}},[e._v("28. 组件中 data 为什么是一个函数？")])]),a("li",[a("a",{attrs:{href:"#_29-谈谈你对-keep-alive"}},[e._v("29. 谈谈你对 keep-alive")])]),a("li",[a("a",{attrs:{href:"#_30-父组件可以监听到子组件的生命周期吗"}},[e._v("30. 父组件可以监听到子组件的生命周期吗？")])]),a("li",[a("a",{attrs:{href:"#_31-说说-vue-内置指令"}},[e._v("31. 说说 vue 内置指令")])]),a("li",[a("a",{attrs:{href:"#_32-vue3-0-用过吗-了解多少"}},[e._v("32. Vue3.0 用过吗？了解多少？")])]),a("li",[a("a",{attrs:{href:"#_33-vue-router-路由钩子函数是什么-执行顺序是什么"}},[e._v("33. vue-router 路由钩子函数是什么？执行顺序是什么？")])]),a("li",[a("a",{attrs:{href:"#_34-vue-router-动态路由是什么-有什么问题。"}},[e._v("34. vue-router 动态路由是什么？有什么问题。")])]),a("li",[a("a",{attrs:{href:"#_35-vue-router-组件复用导致路由参数失效怎么办"}},[e._v("35. vue-router 组件复用导致路由参数失效怎么办？")])]),a("li",[a("a",{attrs:{href:"#_36-谈一下对-vuex-的个人理解"}},[e._v("### 36. 谈一下对 vuex 的个人理解")])]),a("li",[a("a",{attrs:{href:"#_37-vuex-页面刷新数据丢失怎么解决"}},[e._v("37. Vuex 页面刷新数据丢失怎么解决？")])]),a("li",[a("a",{attrs:{href:"#_38-vuex-为什么要分模块并且加命名空间"}},[e._v("38. Vuex 为什么要分模块并且加命名空间？")])]),a("li",[a("a",{attrs:{href:"#_39-使用过-vue-ssr-吗-说说-ssr"}},[e._v("39. 使用过 Vue SSR 吗？说说 SSR")])]),a("li",[a("a",{attrs:{href:"#_40-vue-中使用了哪些设计模式"}},[e._v("40. vue 中使用了哪些设计模式？")])]),a("li",[a("a",{attrs:{href:"#_41-vue-set-方法原理"}},[e._v("41. Vue.set 方法原理")])]),a("li",[a("a",{attrs:{href:"#_42-vue-extend-作用和原理"}},[e._v("42. Vue.extend 作用和原理")])]),a("li",[a("a",{attrs:{href:"#_43-写过自定义指令吗-原理是什么"}},[e._v("43. 写过自定义指令吗？原理是什么？")])]),a("li",[a("a",{attrs:{href:"#_44-vue-模板编译原理"}},[e._v("44. Vue 模板编译原理")])]),a("li",[a("a",{attrs:{href:"#_45-生命周期钩子是如何实现的"}},[e._v("45. 生命周期钩子是如何实现的")])]),a("li",[a("a",{attrs:{href:"#_46-函数式组件使用场景和原理"}},[e._v("46. 函数式组件使用场景和原理")])]),a("li",[a("a",{attrs:{href:"#_47-diff-算法了解吗"}},[e._v("47. diff 算法了解吗？")])]),a("li",[a("a",{attrs:{href:"#_48-什么是双向绑定"}},[e._v("48. 什么是双向绑定？")])]),a("li",[a("a",{attrs:{href:"#_49-双向绑定的原理是什么"}},[e._v("49. 双向绑定的原理是什么？")])]),a("li",[a("a",{attrs:{href:"#_50-实现双向绑定"}},[e._v("50. 实现双向绑定")])]),a("li",[a("a",{attrs:{href:"#_51-route和-router-的区别"}},[e._v("51. $route和$router 的区别")])]),a("li",[a("a",{attrs:{href:"#_52-跨域的方法"}},[e._v("52. 跨域的方法：")])]),a("li",[a("a",{attrs:{href:"#_53-异步管理"}},[e._v("53. 异步管理：")])]),a("li",[a("a",{attrs:{href:"#_54-怎么定义-vue-router-的动态路由-怎么获取传过来的动态参数"}},[e._v("54. 怎么定义 vue-router 的动态路由？怎么获取传过来的动态参数")])]),a("li",[a("a",{attrs:{href:"#_55-vue-router-有哪几种导航钩子"}},[e._v("55. vue-router 有哪几种导航钩子？")])]),a("li",[a("a",{attrs:{href:"#_56-scss-是什么-在-vue-cli-中的安装使用步骤是-有哪几大特性"}},[e._v("56. scss 是什么？在 vue.cli 中的安装使用步骤是？有哪几大特性？")])]),a("li",[a("a",{attrs:{href:"#_57-vue-loader-是什么-使用它的用途有哪些"}},[e._v("57. vue-loader 是什么？使用它的用途有哪些？")])]),a("li",[a("a",{attrs:{href:"#_58-vue-如何实现按需加载配合-webpack-设置"}},[e._v("58. vue 如何实现按需加载配合 webpack 设置?")])]),a("li",[a("a",{attrs:{href:"#_59-1-vuex-是什么-怎么使用-哪种功能场景使用它"}},[e._v("59. （1）vuex 是什么？怎么使用？哪种功能场景使用它？")])]),a("li",[a("a",{attrs:{href:"#_60-聊聊你对-vue-js-的-template-编译的理解"}},[e._v("60. 聊聊你对 Vue.js 的 template 编译的理解？")])])])]),a("p"),e._v(" "),a("h3",{attrs:{id:"_1-图片懒加载问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-图片懒加载问题"}},[e._v("#")]),e._v(" 1.图片懒加载问题")]),e._v(" "),a("p",[e._v("(1) 什么是图片懒加载？")]),e._v(" "),a("p",[e._v("答: 进入页面时，只加载可视区域内的图片资源，当我们向下滚动的时候图片资源才会被请求到，这就是图片懒加载")]),e._v(" "),a("p",[e._v("(2)为什么要做图片懒加载？")]),e._v(" "),a("p",[e._v("图片懒加载就是网页性能优化的一种方式，可以提升用户体验，节省用户流量图片懒加载图片的标签是img标签，图片的主要来源也是根据img标签的src来实现的")]),e._v(" "),a("p",[e._v("(3)vue----自定义指令-懒加载")]),e._v(" "),a("h3",{attrs:{id:"_2-替换日期格式-zz-yy-xxxx-替换成-xxxx-zz-yy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-替换日期格式-zz-yy-xxxx-替换成-xxxx-zz-yy"}},[e._v("#")]),e._v(" 2. 替换日期格式，zz-yy-xxxx 替换成 xxxx-zz-yy")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var reg = /(\\d{2})\\.(\\d{2})\\/(\\d{4})/\n\nvar data = '10.24/2017'\n\ndata = data.replace(reg, '$3-$1-$2')\n\nconsole.log(data)//2017-10-24\n")])])]),a("h3",{attrs:{id:"_3-js-是一门面向对象的语言-说说面向对象语言的三大特征"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-js-是一门面向对象的语言-说说面向对象语言的三大特征"}},[e._v("#")]),e._v(" 3. JS 是一门面向对象的语言，说说面向对象语言的三大特征？")]),e._v(" "),a("p",[e._v("三大特征是：封装、继承和多态。")]),e._v(" "),a("p",[e._v("封装是指隐藏逻辑实现过程，只对外暴露方法与属性，使用者只需要了解是如何使用的就行，不必关心内部是如何实现的，目的是为了简化实现过程，做到多处复用，提高开发效率。当需要维护时，业务逻辑与工具功能是分开的，降低迭代成本")]),e._v(" "),a("p",[e._v("继承是子对象可以继承父对象的属性和行为，亦即父对象拥有的属性和行为，其子对象也就拥有了这些属性和行为。这非常类似大自然中的物种遗传。")]),e._v(" "),a("p",[e._v("多态性是指允许不同类的对象对同一消息作出响应。比如同样的加法，把两个时间加在一起和把两个整数加在一起肯定完全不同。又比如，同样的选择编辑-粘贴操作，在字处理程序和绘图程序中有不同的效果。多态性包括参数化多态性和包含多态性。多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。")]),e._v(" "),a("h3",{attrs:{id:"_4-js-函数中的继承主要是继承什么-可以继承函数体吗-原因是啥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-js-函数中的继承主要是继承什么-可以继承函数体吗-原因是啥"}},[e._v("#")]),e._v(" 4. js 函数中的继承主要是继承什么？可以继承函数体吗？原因是啥")]),e._v(" "),a("p",[e._v("JS 函数的继承主要继承的是函数名，没办法实现函数体继承。")]),e._v(" "),a("h3",{attrs:{id:"_5-声明一个-fn-函数-并对其使用-typeof-结果返回什么-然后给-fn-添加一个属性-会报错不-为什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-声明一个-fn-函数-并对其使用-typeof-结果返回什么-然后给-fn-添加一个属性-会报错不-为什么"}},[e._v("#")]),e._v(" 5. 声明一个 fn 函数，并对其使用 typeof 结果返回什么，然后给 fn 添加一个属性，会报错不，为什么?")]),e._v(" "),a("p",[e._v("结果返回 function 字符串，给 fn 添加属性不会报错，因为函数本身就是一种 object 对象，给对象添加属性是不会报错的。")]),e._v(" "),a("h3",{attrs:{id:"_6-定义一个字符串-对这个字符串使用-typeof-结果返回什么-既然返回了-string-字符串-而属性和方法是对象才有的-哪为什么可以在我定义的字符串上使用-split、join-、和-length-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-定义一个字符串-对这个字符串使用-typeof-结果返回什么-既然返回了-string-字符串-而属性和方法是对象才有的-哪为什么可以在我定义的字符串上使用-split、join-、和-length-方法"}},[e._v("#")]),e._v(" 6. 定义一个字符串，对这个字符串使用 typeof，结果返回什么？既然返回了 string 字符串，而属性和方法是对象才有的，哪为什么可以在我定义的字符串上使用 split、join()、和 length 方法")]),e._v(" "),a("p",[e._v("在全局环境中存在简单数据类型的对象，而字符串对象就是其中的一种，所有字符串都是这个对象的实例，当我们对字符串使用属性与方法时，字符串本身其实是没有对应方法的，这个时候，js 会沿着作用域往上寻找，最终在 string 对象上找到了对应的属性与方法")]),e._v(" "),a("h3",{attrs:{id:"_7-我有一段文字-但不知道具体有多少字-我怎么实现单行的话居中显示-多行的话就靠左显示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-我有一段文字-但不知道具体有多少字-我怎么实现单行的话居中显示-多行的话就靠左显示"}},[e._v("#")]),e._v(" 7. 我有一段文字，但不知道具体有多少字，我怎么实现单行的话居中显示，多行的话就靠左显示？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("display: flex;\nflex-direction: row;\njustify-content: center;\n")])])]),a("h3",{attrs:{id:"_8-我想实现一段动画-我有哪些可选的实现方式-一段流畅的动画帧与帧之间间隔有什么要求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-我想实现一段动画-我有哪些可选的实现方式-一段流畅的动画帧与帧之间间隔有什么要求"}},[e._v("#")]),e._v(" 8. 我想实现一段动画，我有哪些可选的实现方式？一段流畅的动画帧与帧之间间隔有什么要求？")]),e._v(" "),a("p",[e._v("答：html5 动画，js 动画，CSS3 动画。多数情况下最高的绘制频率只能是每秒 60 帧(frame per second)，对应于显示器的 60Hz，低于这个频率，肉眼感觉画面卡顿不流畅，高于这个频率，及其耗费性能。因此通常采用的时间间隔就是 1/60,也就是 16.7ms。")]),e._v(" "),a("h3",{attrs:{id:"_9-什么是-mvvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-什么是-mvvm"}},[e._v("#")]),e._v(" 9. 什么是 mvvm?")]),e._v(" "),a("p",[e._v("MVVM 的核心是数据驱动即 ViewModel，ViewModel 是 View 和 Model 的关系映射。MVVM 本质就是基于操作数据来操作视图进而操作 DOM，借助于 MVVM 无需直接操作 DOM，开发者只需编写 ViewModel 中有业务，使得 View 完全实现自动化。")]),e._v(" "),a("h3",{attrs:{id:"_10-什么是-spa-单页面-它的优缺点分别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-什么是-spa-单页面-它的优缺点分别是什么"}},[e._v("#")]),e._v(" 10. 什么是 SPA 单页面，它的优缺点分别是什么")]),e._v(" "),a("p",[e._v("SPA（ single-page application ）即一个web项目就只有一个页面（即一个HTML文件,HTML 内容的变换是利用路由机制实现的。仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。")]),e._v(" "),a("p",[a("strong",[e._v("优点:")]),e._v("\n用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；")]),e._v(" "),a("p",[e._v("基于上面一点，SPA 相对对服务器压力小；")]),e._v(" "),a("p",[e._v("前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；")]),e._v(" "),a("p",[a("strong",[e._v("缺点：")]),e._v("\n初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；")]),e._v(" "),a("p",[e._v("前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；")]),e._v(" "),a("p",[e._v("SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。")]),e._v(" "),a("h3",{attrs:{id:"_11-生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-生命周期"}},[e._v("#")]),e._v(" 11. 生命周期")]),e._v(" "),a("p",[e._v("(1) 基本概念")]),e._v(" "),a("p",[e._v("★ 什么是vue生命周期？ Vue 实例从创建到销毁的过程，就是生命周期。”")]),e._v(" "),a("p",[e._v("注意：浏览器有8个钩子，但是node中做服务端渲染的时候只有beforeCreate和created")]),e._v(" "),a("p",[e._v("beforeCreate是new Vue()之后触发的第一个钩子，在当前阶段data、methods、computed以及watch上的数据和方法都不能被访问。")]),e._v(" "),a("p",[e._v("created在实例创建完成后发生，当前阶段已经完成了数据观测，也就是可以使用数据，更改数据，在这里更改数据不会触发updated函数。可以做一些初始数据的获取，在当前阶段无法与Dom进行交互，如果非要想，可以通过vm.$nextTick来访问Dom。")]),e._v(" "),a("p",[e._v("beforeMount发生在挂载之前，在这之前template模板已导入渲染函数编译。而当前阶段虚拟Dom已经创建完成，即将开始渲染。在此时也可以对数据进行更改，不会触发updated。")]),e._v(" "),a("p",[e._v("mounted在挂载完成后发生，在当前阶段，真实的Dom挂载完毕，数据完成双向绑定，可以访问到Dom节点，使用$refs属性对Dom进行操作。")]),e._v(" "),a("p",[e._v("beforeUpdate发生在更新之前，也就是响应式数据发生更新，虚拟dom重新渲染之前被触发，你可以在当前阶段进行更改数据，不会造成重渲染。")]),e._v(" "),a("p",[e._v("updated发生在更新完成之后，当前阶段组件Dom已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新。")]),e._v(" "),a("p",[e._v('beforeDestroy发生在实例销毁之前，在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除计时器，销毁父组件对子组件的重复监听。beforeDestroy(){Bus.$off("saveTheme")}')]),e._v(" "),a("p",[e._v("destroyed发生在实例销毁之后，这个时候只剩下了dom空壳。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁。")]),e._v(" "),a("p",[e._v("(2)生命周期调用顺序")]),e._v(" "),a("p",[e._v("组件的调用顺序都是先父后子")]),e._v(" "),a("p",[e._v("渲染完成的顺序是先子后父")]),e._v(" "),a("p",[e._v("组件的销毁操作是先父后子")]),e._v(" "),a("p",[e._v("销毁完成的顺序是先子后父")]),e._v(" "),a("p",[e._v("加载渲染过程 父beforeCreate->父created->父beforeMount->子beforeCreate->子created->子beforeMount- >子mounted->父mounted")]),e._v(" "),a("p",[e._v("子组件更新过程 父beforeUpdate->子beforeUpdate->子updated->父updated")]),e._v(" "),a("p",[e._v("父组件更新过程 父 beforeUpdate -> 父 updated")]),e._v(" "),a("p",[e._v("销毁过程 父beforeDestroy->子beforeDestroy->子destroyed->父destroyed")]),e._v(" "),a("p",[e._v("(3)vue生命周期的作用是什么")]),e._v(" "),a("p",[e._v("它的生命周期中有多个事件钩子，让我们控制Vue实例过程更加清晰。")]),e._v(" "),a("p",[e._v("(4)第一次页面加载会触发哪几个钩子")]),e._v(" "),a("p",[e._v("第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子")]),e._v(" "),a("p",[e._v("(5) 每个周期具体适合哪些场景")]),e._v(" "),a("p",[e._v("beforecreate : 可以在这加个loading事件，在加载实例时触发")]),e._v(" "),a("p",[e._v("created : 初始化完成时的事件写在这里，如在这结束loading事件，异步请求也适宜在这里调用")]),e._v(" "),a("p",[e._v("mounted : 挂载元素，获取到DOM节点")]),e._v(" "),a("p",[e._v("updated : 如果对数据统一处理，在这里写上相应函数")]),e._v(" "),a("p",[e._v("beforeDestroy : 可以清除定时器")]),e._v(" "),a("p",[e._v("nextTick : 更新数据后立即操作dom")]),e._v(" "),a("h3",{attrs:{id:"_12-v-show-与-v-if-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-v-show-与-v-if-的区别"}},[e._v("#")]),e._v(" 12. v-show 与 v-if 的区别")]),e._v(" "),a("p",[e._v("v-if")]),e._v(" "),a("p",[e._v("是真正的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；")]),e._v(" "),a("p",[e._v("也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。")]),e._v(" "),a("p",[e._v("v-show")]),e._v(" "),a("p",[e._v("不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 “display” 属性进行切换。")]),e._v(" "),a("p",[e._v("所以:\nv-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；\nv-show 则适用于需要非常频繁切换条件的场景。")]),e._v(" "),a("h3",{attrs:{id:"_13-vue-的单向数据流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-vue-的单向数据流"}},[e._v("#")]),e._v(" 13. Vue 的单向数据流")]),e._v(" "),a("p",[e._v("背景：")]),e._v(" "),a("p",[e._v("所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向变的混乱。")]),e._v(" "),a("p",[e._v("每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。子组件想修改时，只能通过 $emit 派发一个自定义事件，父组件接收到后，由父组件修改。")]),e._v(" "),a("p",[e._v("有两种常见的试图改变一个 prop 的情形 :")]),e._v(" "),a("p",[e._v("这个 prop 用来传递一个初始值；\n这个子组件接下来希望将其作为一个本地的 prop 数据来使用。\n在这种情况下，最好定义一个本地的 data属性并将这个 prop 用作其初始值：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("```\nprops: ['initialCounter'],\ndata: function () {\n  return {\n  counter: this.initialCounter //定义本地的data属性接收prop初始值\n  }\n}\n```\n")])])]),a("p",[e._v("这个 prop 以一种原始的值传入且需要进行转换。\n在这种情况下，最好使用这个 prop 的值来定义一个计算属性\n"),a("code",[e._v("props: ['size'], computed: { normalizedSize: function () { return this.size.trim().toLowerCase() } }")])]),e._v(" "),a("h3",{attrs:{id:"_14-异步请求适合在哪个生命周期调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-异步请求适合在哪个生命周期调用"}},[e._v("#")]),e._v(" 14. 异步请求适合在哪个生命周期调用？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("官方实例的异步请求是在mounted生命周期中调用的，而实际上也可以在created生命周期中调用。\n\n本人推荐在 created 钩子函数中调用异步请求，有以下优点：\n\n能更快获取到服务端数据，减少页面 loading 时间；\n\nssr 不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；\n")])])]),a("h3",{attrs:{id:"_16-8-什么是-ssr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-8-什么是-ssr"}},[e._v("#")]),e._v(" 16. 8.什么是 SSR")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("SSR也就是服务端渲染，也就是将Vue在客户端把标签渲染成HTML的工作放在服务端完成，然后再把html直接返回给客户端。\n\n服务端渲染 SSR 的优缺点如下：\n\n（1）服务端渲染的优点：\n\n​更好的 SEO： 因为 SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容；而 SSR 是直接由服务端返回已经渲\t染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面；\n\n​更快的内容到达时间（首屏加载更快）： SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；SSR 直接由服务端渲染好页面\t直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间；\n\n（2) 服务端渲染的缺点：\n\n更多的开发条件限制： 例如服务端渲染只支持 beforCreate 和 created 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序 SPA 不同，服务端渲染应用程序，需要处于 Node.js server 运行环境；\n\n更多的服务器负载： 在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用CPU 资源 (CPU-intensive - CPU 密集)，因此如果你预料在高流量环境 ( high traffic ) 下使用，请准备相应的服务器负载，并明智地采用缓存策略。\n")])])]),a("h3",{attrs:{id:"_17-vue-路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-vue-路由"}},[e._v("#")]),e._v(" 17. Vue 路由")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("(1) vue-router 路由模式有几种？\n\nvue-router 有 3 种路由模式：hash、history、abstract，对应的源码如下所示：\n\n```\nswitch (mode) {\n case 'history':\n     this.history = new HTML5History(this, options.base)\n     break\n case 'hash':\n     this.history = new HashHistory(this, options.base, this.fallback)\n     break\n case 'abstract':\n     this.history = new AbstractHistory(this, options.base)\n     break\n default:\n     if (process.env.NODE_ENV !== 'production') {\n      assert(false, `invalid mode: ${mode}`)\n     }\n}\n```\n\n三 种路由模式的说明如下：\n\nhash: 使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器；\n\nhistory : 依赖 HTML5 History API 和服务器配置。具体可以查看 HTML5 History 模式；\n\nabstract : 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.\n\n(2) hash路由和history路由实现原理\n\n​\t[1]hash 模式的实现原理\n\n早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 '#search'：\n\nhttps://www.word.com#search复制代码\n\nhash 路由模式的实现主要是基于下面几个特性：\n\nURL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；\n\nhash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制hash 的切换；\n\n可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变；或者使用 JavaScript 来对 loaction.hash 进行赋值，改变 URL 的 hash 值；\n\n我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。\n\n​\t[2]history 模式的实现原理\n\nHTML5 提供了 History API 来实现 URL 的变化。其中做最主要的 API 有以下两个：history.pushState() 和 history.repalceState()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：\n\nwindow.history.pushState(null, null, path);\n\nwindow.history.replaceState(null, null, path);复制代码\n\nhistory 路由模式的实现主要基于存在下面几个特性：\n\npushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；\n\n我们可以使用 popstate 事件来监听 url 的变化，从而对页面进行跳转（渲染）；\n\nhistory.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。\n")])])]),a("h3",{attrs:{id:"_18-你有对-vue-项目进行哪些优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-你有对-vue-项目进行哪些优化"}},[e._v("#")]),e._v(" 18. 你有对 Vue 项目进行哪些优化？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("（1）代码层面的优化\n\n​\tv-if 和 v-show 区分使用场景\n\n​\tcomputed 和 watch 区分使用场景\n\n​\tv-for 遍历必须为 item 添加 key，且避免同时使用 v-if\n\n​\t长列表性能优化\n\n​\t事件的销毁\n\n​\t图片资源懒加载\n\n​\t路由懒加载\n\n​\t第三方插件的按需引入\n\n​\t优化无限列表性能\n\n​\t服务端渲染 SSR or 预渲染\n\n（2）Webpack 层面的优化\n\n​\tWebpack 对图片进行压缩-------先引入npm install image-webpack-loader --save-dev，然后在 webpack.config.js 中配置\n\n​\t减少 ES6 转为 ES5 的冗余代码\n\n​\t提取公共代码\n\n​\t模板预编译\n\n​\t提取组件的 CSS\n\n​\t优化 SourceMap\n\n​\t构建结果输出分析\n\n​\tVue 项目的编译优化\n\n（3）基础的 Web 技术的优化\n\n​\t开启 gzip 压缩\n\n​\t浏览器缓存\n\n​\tCDN 的使用\n\n​\t使用 Chrome Performance 查找性能瓶颈\n")])])]),a("h3",{attrs:{id:"_19-vue-中的-key-有什么作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-vue-中的-key-有什么作用"}},[e._v("#")]),e._v(" 19. Vue 中的 key 有什么作用？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速。\n Vue 的 diff 过程可以概括为：oldCh 和 newCh 各有两个头尾的变量 oldStartIndex、oldEndIndex 和 newStartIndex、newEndIndex，它们会新节点和旧节点会进行两两对比，即一共有4种比较方式：newStartIndex 和oldStartIndex 、newEndIndex 和 oldEndIndex 、newStartIndex 和 oldEndIndex 、newEndIndex 和 oldStartIndex，如果以上 4 种比较都没匹配，如果设置了key，就会用 key 再进行比较，在比较的过程中，遍历会往中间靠，一旦 StartIdx > EndIdx 表明 oldCh 和 newCh 至少有一个已经遍历完了，就会结束比较。\n\n所以 Vue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速\n\n更准确因为带 key 就不是就地复用了，在 sameNode 函数 a.key === b.key对比中可以避免就地复用的情况。所以会更加准确。\n\n更快速：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快，源码如下：\n\n```\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n let i, key\n const map = {}\n for (i = beginIdx; i <= endIdx; ++i) {\n  key = children[i].key\n  if (isDef(key)) map[key] = i\n }\n return map\n}\n```\n")])])]),a("h3",{attrs:{id:"_20-虚拟-dom-实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-虚拟-dom-实现原理"}},[e._v("#")]),e._v(" 20. 虚拟 DOM 实现原理")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("虚拟 DOM 的实现原理主要包括以下 3 部分：\n\n用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；\n\ndiff 算法 — 比较两棵虚拟 DOM 树的差异；\n\npach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。\n\n[详情点击这里](https://juejin.im/post/6844903895467032589#heading-14)\n")])])]),a("h3",{attrs:{id:"_21-虚拟-dom-的优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-虚拟-dom-的优缺点"}},[e._v("#")]),e._v(" 21. 虚拟 DOM 的优缺点")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("优点：\n\n保证性能下限： 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；\n\n无需手动操作 DOM： 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；\n\n跨平台： 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。\n\n缺点:\n\n无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。\n")])])]),a("h3",{attrs:{id:"_22-proxy-与-object-defineproperty-优劣对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-proxy-与-object-defineproperty-优劣对比"}},[e._v("#")]),e._v(" 22. Proxy 与 Object.defineProperty 优劣对比")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("Proxy 的优势如下:\n\nProxy 可以直接监听对象而非属性；\n\nProxy 可以直接监听数组的变化；\n\nProxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；\n\nProxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；\n\nProxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；\n\nObject.defineProperty 的优势如下:\n\n兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平\n\n\n(1)Vue2.x响应式数据原理\n\nVue在初始化数据时，会使用Object.defineProperty重新定义data中的所有属性，当页面使用对应属性时，首先会进行依赖收集(收集当前组件的watcher)如果属性发生变化会通知相关依赖进行更新操作(发布订阅)\n\n(2)Vue3.x响应式数据原理\n\nVue3.x改用Proxy替代Object.defineProperty。因为Proxy可以直接监听对象和数组的变化，并且有多达13种拦截方法。并且作为新标准将受到浏览器厂商重点持续的性能优化。\n")])])]),a("h3",{attrs:{id:"_23-computed-和-watch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-computed-和-watch"}},[e._v("#")]),e._v(" 23. Computed 和 Watch")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("computed:\n\ncomputed是计算属性,也就是计算值,它更多用于计算值的场景\n\ncomputed具有缓存性,computed的值在getter执行后是会缓存的，只有在它依赖的属性值改变之后，下一次获取computed的值时才会重新调用对应的getter来计算\n\ncomputed适用于计算比较消耗性能的计算场景\n\nwatch:\n\n更多的是「观察」的作用,类似于某些数据的监听回调,用于观察props $emit或者本组件的值,当数据变化时来执行回调进行后续操作\n\n无缓存性，页面重新渲染时值不变化也会执行\n\n小结:\n\n当我们要进行数值计算,而且依赖于其他数据，那么把这个数据设计为computed\n如果你需要在某个数据变化时做一些事情，使用watch来观察这个数据变化\n")])])]),a("h3",{attrs:{id:"_24-vue2-x-中如何监测数组变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-vue2-x-中如何监测数组变化"}},[e._v("#")]),e._v(" 24. vue2.x 中如何监测数组变化")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("使用了函数劫持的方式，重写了数组的方法，Vue将data中的数组进行了原型链重写，指向了自己定义的数组原型方法。这样当调用数组api时，可以通知依赖更新。如果数组中包含着引用类型，会对数组中的引用类型再次递归遍历进行监控。这样就实现了监测数组变化。\n")])])]),a("h3",{attrs:{id:"_25-vue-框架怎么实现对象和数组的监听"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-vue-框架怎么实现对象和数组的监听"}},[e._v("#")]),e._v(" 25. Vue 框架怎么实现对象和数组的监听？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("Vue 框架是通过遍历数组 和递归遍历对象，从而达到利用 Object.defineProperty() 也能对对象和数组（部分方法的操作）进行监听。\n")])])]),a("h3",{attrs:{id:"_26-vue-是如何实现数据双向绑定的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26-vue-是如何实现数据双向绑定的"}},[e._v("#")]),e._v(" 26. Vue 是如何实现数据双向绑定的")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("Vue 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据\n\n输入框内容变化时，Data 中的数据同步变化。即 View => Data 的变化。 Data 中的数据变化时，文本节点的内容同步变化。即 Data => View 的变化。\n\n其中，View 变化更新 Data ，可以通过事件监听的方式来实现，所以 Vue 的数据双向绑定的工作主要是如何根据 Data 变化更新 View。\n\nVue 主要通过以下 4 个步骤来实现数据双向绑定的：\n\n实现一个监听器 Observer对数据对象进行遍历，包括子属性对象的属性，利用 Object.defineProperty() 对属性都加上 setter 和 getter。这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化。\n\n实现一个解析器 Compile解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。\n\n实现一个订阅者 Watcher：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁 ，主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 Compile 中对应的更新函数。\n\n实现一个订阅器 Dep订阅器采用 发布-订阅 设计模式，用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理。\n")])])]),a("h3",{attrs:{id:"_27-v-model-的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_27-v-model-的原理"}},[e._v("#")]),e._v(" 27. v-model 的原理")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('我们在 vue 项目中主要使用 v-model 指令在表单 input、textarea、select 等元素上创建双向数据绑定，我们知道 v-model 本质上不过是语法糖，v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：\n\ntext 和 textarea 元素使用 value 属性和 input 事件；\n\ncheckbox 和 radio 使用 checked 属性和 change 事件；\n\nselect 字段将 value 作为 prop 并将 change 作为事件。\n\n以 input 表单元素为例：\n\n```\n<input v-model=\'something\'>\n```\n\n相当于\n\n```\n<input v-bind:value="something" v-on:input="something = $event.target.value">\n```\n')])])]),a("h3",{attrs:{id:"_28-组件中-data-为什么是一个函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_28-组件中-data-为什么是一个函数"}},[e._v("#")]),e._v(" 28. 组件中 data 为什么是一个函数？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("为什么组件中的 data 必须是一个函数，然后 return 一个对象，而 new Vue 实例里，data 可以直接是一个对象？\n\n```\n// data\n\ndata() {\n return {\n   message: \"子组件\",\n   childName:this.name\n }\n}\n```\n\n```\n// new Vue\n\nnew Vue({\nel: '#app',\nrouter,\ntemplate: '<App/>',\ncomponents: {App}\n})\n```\n\n一个组件被复用多次的话，也就会创建多个实例。本质上，这些实例用的都是同一个构造函数。如果data是对象的话，对象属于引用类型，会影响到所有的实例。所以为了保证组件不同的实例之间data不冲突，data必须是一个函数。 而 new Vue 的实例，是不会被复用的，因此不存在引用对象的问题。\n")])])]),a("h3",{attrs:{id:"_29-谈谈你对-keep-alive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_29-谈谈你对-keep-alive"}},[e._v("#")]),e._v(" 29. 谈谈你对 keep-alive")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：\n\n一般结合路由和动态组件一起使用，用于缓存组件；\n\n提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高；\n\n对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。\n\nkeep-alive的生命周期\n\nactivated： 页面第一次进入的时候，钩子触发的顺序是created->mounted->activated\n\ndeactivated: 页面退出的时候会触发deactivated，当再次前进或者后退的时候只触发activated\n")])])]),a("h3",{attrs:{id:"_30-父组件可以监听到子组件的生命周期吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_30-父组件可以监听到子组件的生命周期吗"}},[e._v("#")]),e._v(" 30. 父组件可以监听到子组件的生命周期吗？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理，可以通过以下写法实现：\n\n```\n// Parent.vue\n\n<Child @mounted="doSomething"/>\n```\n\n```\n// Child.vue\n\nmounted() {\n this.$emit("mounted");\n}\n```\n\n以上需要手动通过 $emit 触发父组件的事件，更简单的方式可以在父组件引用子组件时通过 @hook 来监听即可，如下所示：\n\n```\n// Parent.vue\n\n<Child @hook:mounted="doSomething" ></Child>\n\ndoSomething() {\n  console.log(\'父组件监听到 mounted 钩子函数 ...\');\n},\n```\n\n```\n// Child.vue\nmounted(){\n  console.log(\'子组件触发 mounted 钩子函数 ...\');\n},\n```\n\n// 以上输出顺序为：\n\n// 子组件触发 mounted 钩子函数 ...\n\n// 父组件监听到 mounted 钩子函数 ... 复制代码\n\n当然 @hook 方法不仅仅是可以监听 mounted，其它的生命周期事件，例如：created，updated 等都可以监听。\n')])])]),a("h3",{attrs:{id:"_31-说说-vue-内置指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_31-说说-vue-内置指令"}},[e._v("#")]),e._v(" 31. 说说 vue 内置指令")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("v-once - 定义它的元素或组件只渲染一次，包括元素或组件的所有节点，首次渲染后，不再随数据的变化重新渲染，将被视为静态内容。\n\nv-cloak - 这个指令保持在元素上直到关联实例结束编译 -- 解决初始化慢到页面闪动的最佳实践。\n\nv-bind - 绑定属性，动态更新HTML元素上的属性。例如 v-bind:class。\n\nv-on - 用于监听DOM事件。例如 v-on:click v-on:keyup\n\nv-html - 赋值就是变量的innerHTML -- 注意防止xss攻击\n\nv-text - 更新元素的textContent\n\nv-model - 1、在普通标签。变成value和input的语法糖，并且会处理拼音输入法的问题。2、再组件上。也是处理value和input语法糖。\n\nv-if / v-else / v-else-if。可以配合template使用；在render函数里面就是三元表达式。\n\nv-show - 使用指令来实现 -- 最终会通过display来进行显示隐藏\n\nv-for - 循环指令编译出来的结果是 -L 代表渲染列表。优先级比v-if高最好不要一起使用，尽量使用计算属性去解决。注意增加唯一key值，不要使用index作为key。\n\nv-pre - 跳过这个元素以及子元素的编译过程，以此来加快整个项目的编译速度。\n")])])]),a("h3",{attrs:{id:"_32-vue3-0-用过吗-了解多少"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_32-vue3-0-用过吗-了解多少"}},[e._v("#")]),e._v(" 32. Vue3.0 用过吗？了解多少？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("响应式原理的改变 Vue3.x 使用 Proxy 取代 Vue2.x 版本的 Object.defineProperty。\n\n组件选项声明方式 Vue3.x 使用 Composition API setup是Vue3.x新增的一个选项，他是组件内使用Composition API 的入口。\n\n模板语法变化 slot 具名插槽语法，自定义指令v-model升级。\n\n其他方面的更改 Suspense支持Fragment（多个根节点）和 Protal（在dom其他部分渲染组件内容）组件，针对一些特殊的场景做了处理。基于 treeShaking 优化，提供了更多的内置功能。\n")])])]),a("h3",{attrs:{id:"_33-vue-router-路由钩子函数是什么-执行顺序是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_33-vue-router-路由钩子函数是什么-执行顺序是什么"}},[e._v("#")]),e._v(" 33. vue-router 路由钩子函数是什么？执行顺序是什么？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("路由钩子的执行流程，钩子函数种类有：全局守卫、路由守卫、组件守卫。\n\n完整的导航解析流程：\n 1、导航被触发。\n 2、在失活的组件里调用 beforeRouterLeave 守卫。\n 3、调用全局的 beforeEach 守卫。\n 4、在重用的组件调用 beforeRouterUpdate 守卫（2.2+）。\n 5、在路由配置里面 beforeEnter。\n 6、解析异步路由组件。\n 7、在被激活的组件里调用 beforeRouterEnter。\n 8、调用全局的 beforeResolve 守卫（2.5+）。\n 9、导航被确认。\n 10、调用全局的 afterEach 钩子。\n 11、触发 DOM 更新。\n 12、调用 beforeRouterEnter 守卫中传给next的回调函数，创建好的组件实例会作为回调函数的参数传入。\n")])])]),a("h3",{attrs:{id:"_34-vue-router-动态路由是什么-有什么问题。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_34-vue-router-动态路由是什么-有什么问题。"}},[e._v("#")]),e._v(" 34. vue-router 动态路由是什么？有什么问题。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('我们经常需要把某种模式匹配到的所有路由，全都映射到同个组件。例如，我们有一个 User组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用“动态路径参数”（dynamic segment）来达到这个效果：\n\n```\nconst User = {\n template: "\nUser\n", };\n const router = new VueRouter({\n routes: [\n // 动态路径参数 以冒号开头\n { path: "/user/:id", component: User },\n ],\n });\n```\n')])])]),a("h3",{attrs:{id:"_35-vue-router-组件复用导致路由参数失效怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_35-vue-router-组件复用导致路由参数失效怎么办"}},[e._v("#")]),e._v(" 35. vue-router 组件复用导致路由参数失效怎么办？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v(' 解决方案：\n 1、通过watch监听路由参数再发请求\n\n```\n watch：{\n "router":function(){\n \t\tthis.getData(this.$router.params.xxx)\n \t}\n }\n```\n\n 2、用 :key来阻止复用\n\n```\nrouter-view :key="$route.fullPath"\n```\n')])])]),a("h3",{attrs:{id:"_36-谈一下对-vuex-的个人理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_36-谈一下对-vuex-的个人理解"}},[e._v("#")]),e._v(" ### 36. 谈一下对 vuex 的个人理解")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("vuex 是专门为 vue 提供的全局状态管理系统，用于多个组件中数据共享、数据缓存等。（无法持久化、内部内心原理是通过创造一个全局实例 new Vue）\n\n![IMG_256](file:///C:\\Users\\18225\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image002.jpg)\n\n主要包括以下几个模块：\n\nState:定义了应用状态的数据结构，可以在这里设置默认的初始化状态。\n\nGetter:允许组件从Store中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。\n\nMutation:是唯一更改 store 中状态的方法，且必须是同步函数。\n\nAction:用于提交 mutation，而不是直接变更状态，可以包含任意异步请求。\n\nModule:允许将单一的 Store 拆分更多个 store 且同时保存在单一的状态树中。\n")])])]),a("h3",{attrs:{id:"_37-vuex-页面刷新数据丢失怎么解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_37-vuex-页面刷新数据丢失怎么解决"}},[e._v("#")]),e._v(" 37. Vuex 页面刷新数据丢失怎么解决？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("需要做 vuex 数据持久化，一般使用本地储存的方案来保存数据，可以自己设计存储方案，也可以使用第三方插件。\n 推荐使用 vuex-persist (脯肉赛斯特)插件，它是为 Vuex 持久化储存而生的一个插件。不需要你手动存取 storage，而是直接将状态保存至 cookie 或者 localStorage中。\n")])])]),a("h3",{attrs:{id:"_38-vuex-为什么要分模块并且加命名空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_38-vuex-为什么要分模块并且加命名空间"}},[e._v("#")]),e._v(" 38. Vuex 为什么要分模块并且加命名空间？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("模块： 由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能会变得相当臃肿。为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块。\n\n命名空间： 默认情况下，模块内部的 action、mutation、getter是注册在全局命名空间的 --- 这样使得多个模块能够对同一 mutation 或 action 做出响应。如果希望你的模块具有更高的封装度和复用性，你可以通过添加 namespaced:true 的方式使其成为带命名的模块。当模块被注册后，他所有 getter、action、及 mutation 都会自动根据模块注册的路径调整命名。\n")])])]),a("h3",{attrs:{id:"_39-使用过-vue-ssr-吗-说说-ssr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_39-使用过-vue-ssr-吗-说说-ssr"}},[e._v("#")]),e._v(" 39. 使用过 Vue SSR 吗？说说 SSR")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("SSR 也就是服务端渲染，也就是将 Vue 在客户端把标签渲染成 HTML 的工作放在服务端完成，然后再把 html 直接返回给客户端。\n\n优点：\n SSR 有着更好的 SEO、并且首屏加载速度更快。\n 缺点：\n 开发条件会受限制，服务器端渲染只支持 beforeCreate 和 created 两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于 Node.js 的运行环境。\n 服务器会有更大的负载需求。\n")])])]),a("h3",{attrs:{id:"_40-vue-中使用了哪些设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_40-vue-中使用了哪些设计模式"}},[e._v("#")]),e._v(" 40. vue 中使用了哪些设计模式？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("(1) 工厂模式 - 传入参数即可创建实例\n 虚拟 DOM 根据参数的不同返回基础标签的 Vnode 和组件 Vnode。\n\n(2) 单例模式 - 整个程序有且仅有一个实例\n vuex 和 vue-router 的插件注册方法 install 判断如果系统存在实例就直接返回掉。\n\n(3) 发布-订阅模式。（vue 事件机制）\n\n(4) 观察者模式。（响应式数据原理）\n\n(5) 装饰器模式（@装饰器的用法）\n\n(6) 策略模式，策略模式指对象有某个行为，但是在不同的场景中，该行为有不同的实现方案 - 比如选项的合并策略。\n")])])]),a("h3",{attrs:{id:"_41-vue-set-方法原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_41-vue-set-方法原理"}},[e._v("#")]),e._v(" 41. Vue.set 方法原理")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("了解 Vue 响应式原理的同学都知道在两种情况下修改 Vue 是不会触发视图更新的。\n 1、在实例创建之后添加新的属性到实例上（给响应式对象新增属性）\n 2、直接更改数组下标来修改数组的值。\n\nVue.set 或者说是 $set 原理如下\n\n因为响应式数据 我们给对象和数组本身新增了__ob__属性，代表的是 Observer 实例。当给对象新增不存在的属性，首先会把新的属性进行响应式跟踪 然后会触发对象 __ob__ 的dep收集到的 watcher 去更新，当修改数组索引时我们调用数组本身的 splice 方法去更新数组。\n")])])]),a("h3",{attrs:{id:"_42-vue-extend-作用和原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_42-vue-extend-作用和原理"}},[e._v("#")]),e._v(" 42. Vue.extend 作用和原理")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("官方解释：Vue.extend 使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。\n\n其实就是一个子类构造器，是Vue组件的核心api。实现思路就是使用原型继承的方法返回了 vue 的子类，并且利用 mergeOptions 把传入组件的 options 就和父类的 options 进行了合并。\n")])])]),a("h3",{attrs:{id:"_43-写过自定义指令吗-原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_43-写过自定义指令吗-原理是什么"}},[e._v("#")]),e._v(" 43. 写过自定义指令吗？原理是什么？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("指令本质上是装饰器，是 vue 对 HTML 元素的扩展，给 HTML 元素添加自定义功能。vue 编译 DOM 时，会找到指令对象，执行指令的相关方法。\n\n自定义指令有五个生命周期（也叫钩子函数），分别是 bind、inserted、update、componentUpdated、unbind\n\n1、bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\n\n2、inserted：被绑定元素插入父节点时调用。\n\n3、update：被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较前后的绑定值。\n\n4、componentUpdated：被绑定元素所在模板完成一次更新周期时调用。\n\n5、unbind：只调用一次，指令与元素解绑时调用。\n\n原理：\n 1、在生成 ast 语法树时，遇到指令会给当前元素添加 directives 属性\n 2、通过 genDirectives 生成指令代码\n 3、在 patch 前将指令的钩子提取到 cbs 中，在 patch 过程中调用对应的钩子。\n 4、当执行指令对应钩子函数时，调用对应指令定义方法。\n")])])]),a("h3",{attrs:{id:"_44-vue-模板编译原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_44-vue-模板编译原理"}},[e._v("#")]),e._v(" 44. Vue 模板编译原理")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("Vue 的编译过程就是将 template 转化为 render 函数的过程，分为以下三步：\n 第一步是将 模板字符串转换成 element ASTs（解析器）\n 第二步是对 AST 进行静态节点标记，主要用来做虚拟 DOM 的渲染优化（优化器）\n 第三步是 使用element ASTs 生成 render 函数代码字符串（代码生成器）\n")])])]),a("h3",{attrs:{id:"_45-生命周期钩子是如何实现的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_45-生命周期钩子是如何实现的"}},[e._v("#")]),e._v(" 45. 生命周期钩子是如何实现的")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("Vue 的生命周期钩子核心实现是利用发布订阅模式先把用户传入的生命周期钩子订阅好（内部采用数组的方法存储）然后在创建组件实例的过程中会一次执行对应的钩子方法（发布）\n")])])]),a("h3",{attrs:{id:"_46-函数式组件使用场景和原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_46-函数式组件使用场景和原理"}},[e._v("#")]),e._v(" 46. 函数式组件使用场景和原理")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("函数式组件与普通组件的区别\n\n1、函数式组件需要在声明组件时指定 functional:true\n\n2、不需要实例化，所以没有this，this通过render函数的第二个参数context代替\n\n3、没有生命周期钩子函数，不能使用计算属性，watch\n\n4、不能通过$emit对外暴露事件，调用事件只能通过context.listeners.click的方式调用外部传入的事件\n\n5、因为函数组件时没有实例化的，所以在外部通过ref去引用组件时，实际引用的是HTMLElement\n\n6、函数式组件的props可以不用显示声明，所以没有在props里面声明的属性都会被自动隐式解析为prop，而普通的组件所有未声明的属性都解析到$attrs里面，并自动挂载到组件根元素上（可以通过inheritAttrs属性禁止）\n\n优点：1.由于函数组件不需要实例化，无状态，没有生命周期，所以渲染性要好于普通组件2.函数组件结构比较简单，代码结构更清晰\n\n使用场景：\n\n一个简单的展示组件，作为容器组件使用 比如 router-view 就是一个函数式组件。 “高阶组件”---用于接受一个组件为参数，返回一个被包装过的组件。\n 相关代码如下：\n\n```\nif (isTrue(Ctor.options.functional)) { // 带有functional的属性的就是函数式组件\n\treturn createFunctionalComponent(Ctor, propsData, data, context, children);\n}\nconst listeners = data.on;\ndata.on = data.nativeOn;\ninstallComponentHooks(data); // 安装组件相关钩子 （函数式组件没有调用此方法，从而性能高于普通组件）\n```\n")])])]),a("h3",{attrs:{id:"_47-diff-算法了解吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_47-diff-算法了解吗"}},[e._v("#")]),e._v(" 47. diff 算法了解吗？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("![img](file:///C:\\Users\\18225\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image004.jpg)\n\ndiff算法采用同级比较。\n\n1、tag 标签不一致直接新节点替换旧节点。\n\n2、tag 标签一样。\n\n​\t先替换属性\n\n​\t对比子元素\n\n​\t新老都有子元素，采用双指针方式进行对比\n​\t sameVnode 判断tag和key完全相同为同一节点，进行节点复用\n   头和头相等对比\n   尾和尾相等对比\n   头和尾相等对比\n\n   sameVnode 的时候传入两个新老子节点patch(oldChild,newChild)\n  乱序情况 -- 上面的都不符合，先遍历旧子节点数组形成 key值映射的map对象。\n  然后根据新子节点数组循环 按照key值和位置关系移动以及新增节点 最后删除多余的旧子节点 如果移动旧节点同样需要    patch(oldChild,newChild)\n\n 新的有子元素，老的没有子元素。-- 直接将子元素虚拟节点转化成真实节点插入即可。\n\n 新的没有子元素，老的有子元素。 -- 直接清空 innerHtml\n\n3、无 tag 标签 -- 文本节点直接比较内容是否一致\n")])])]),a("h3",{attrs:{id:"_48-什么是双向绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_48-什么是双向绑定"}},[e._v("#")]),e._v(" 48. 什么是双向绑定？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("我们先从单向绑定切入\n\n单向绑定非常简单，就是把 Model 绑定到 View，当我们用 JavaScript 代码更新 Model 时，View 就会自动更新\n\n双向绑定就很容易联想到了，在单向绑定的基础上，用户更新了 View，Model 的数据也自动被更新了，这种情况就是双向绑定\n\n![img](file:///C:\\Users\\18225\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image005.png)\n\n当用户填写表单时，View 的状态就被更新了，如果此时可以自动更新 Model 的状态，那就相当于我们把 Model 和 View 做了双向绑定\n\n关系图如下\n\n![img](file:///C:\\Users\\18225\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image006.png)\n")])])]),a("h3",{attrs:{id:"_49-双向绑定的原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_49-双向绑定的原理是什么"}},[e._v("#")]),e._v(" 49. 双向绑定的原理是什么？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("我们都知道 Vue 是数据双向绑定的框架，双向绑定由三个重要部分构成\n\n数据层（Model）：应用的数据及业务逻辑\n\n视图层（View）：应用的展示效果，各类 UI 组件\n\n业务逻辑层（ViewModel）：框架封装的核心，它负责将数据与视图关联起来\n\n而上面的这个分层的架构方案，可以用一个专业术语进行称呼：MVVM\n\n这里的控制层的核心功能便是 “数据双向绑定” 。自然，我们只需弄懂它是什么，便可以进一步了解数据绑定的原理\n\n理解 ViewModel\n\n它的主要职责就是：\n\n数据变化后更新视图\n\n视图变化后更新数据\n\n当然，它还有两个主要部分组成\n\n监听器（Observer）：对所有数据的属性进行监听\n\n解析器（Compiler）：对每个元素节点的指令进行扫描跟解析,根据指令模板替换数据,以及绑定相应的更新函数\n")])])]),a("h3",{attrs:{id:"_50-实现双向绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_50-实现双向绑定"}},[e._v("#")]),e._v(" 50. 实现双向绑定")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("我们还是以 Vue 为例，先来看看 Vue 中的双向绑定流程是什么的\n\nnew Vue()首先执行初始化，对 data 执行响应化处理，这个过程发生 Observe 中；defineReactive 时为每⼀个 key 创建⼀个 Dep 实例\n\n同时对模板执行编译，找到其中动态绑定的数据，从 data 中获取并初始化视图，这个过程发生在 Compile 中；初始化视图时读取某个 key，例如 name1，创建⼀个 watcher1\n\n同时定义⼀个更新函数和 Watcher，将来对应数据变化时 Watcher 会调用更新函数\n\n由于 data 的某个 key 在⼀个视图中可能出现多次，所以每个 key 都需要⼀个管家 Dep 来管理多个 Watcher;由于触发 name1 的 getter 方法，便将 watcher1 添加到 name1 对应的 Dep 中\n\n将来 data 中数据⼀旦发生变化,会首先找到对应的 Dep，通知所有 Watcher 执行更新函数；当 name1 更新，setter 触发时，便可通过对应 Dep 通知其管理所有 Watcher 更新\n\n流程图如下：\n\n![IMG_256](file:///C:\\Users\\18225\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image008.jpg)\n\n实现思路\n\ndefineReactive 时为每⼀个 key 创建⼀个 Dep 实例\n\n初始化视图时读取某个 key，例如 name1，创建⼀个 watcher1\n\n由于触发 name1 的 getter 方法，便将 watcher1 添加到 name1 对应的 Dep 中\n\n当 name1 更新，setter 触发时，便可通过对应 Dep 通知其管理所有 Watcher 更新\n")])])]),a("h3",{attrs:{id:"_51-route和-router-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_51-route和-router-的区别"}},[e._v("#")]),e._v(" 51. $route和$router 的区别")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v(" 答：$route是“路由信息对象”，包括path，params，hash，query，fullPath，matched，name等路由信息参数。而$router是“路由实例”对象包括了路由的跳转方法，钩子函数等\n")])])]),a("h3",{attrs:{id:"_52-跨域的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_52-跨域的方法"}},[e._v("#")]),e._v(" 52. 跨域的方法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v(" 浏览器为了安全机制，采用同源策略，域名，协议，端口号一致的才可以进行访问;\n 1，jsonp:是通过script标签的src属性来实现跨域的。通过src传过去一个函数，把数据放在函数的实参调用就可以拿到数据。由于是用src的链接，所以jsonp只支持get方式。content-type:javascript\n 2，cors:改变请求头信息。客户端加：Origin:地址。服务器：Access-Control-Allow-Origin:地址.支持IE10以上。\n 3，webpack:devServer里配置proxy:{api:'地址'};\n 4，nginx反向代理：\n\n```\nnginx.conf\n upstream tomcatserver{\n   server 192.168.72.49:8081//3.找到代理服务器的ip地址进行请求\n }\n server{\n   listen    80;\n   server_name  8081.max.com;//1.客户端调用名\n   location / {\n     proxy_pass  http://tomcatserver;//2.到代理服务器\n     index  index.html index.html;\n   }\n }\n```\n")])])]),a("h3",{attrs:{id:"_53-异步管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_53-异步管理"}},[e._v("#")]),e._v(" 53. 异步管理：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v(" promise:promise等到执行完成后返回2种状态，resolve代表成功，reject代表失败。\n 如果有多个异步可以用promise.all([]).\n async await:async声明一个函数返回一个promise。await等到promise异步执行结束拿到的一个结果\n")])])]),a("h3",{attrs:{id:"_54-怎么定义-vue-router-的动态路由-怎么获取传过来的动态参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_54-怎么定义-vue-router-的动态路由-怎么获取传过来的动态参数"}},[e._v("#")]),e._v(" 54. 怎么定义 vue-router 的动态路由？怎么获取传过来的动态参数")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v(" 在router目录下的index.js文件中，对path属性加上/:id。 使用router对象的params.id\n\n使用router对象的params.id。\n")])])]),a("h3",{attrs:{id:"_55-vue-router-有哪几种导航钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_55-vue-router-有哪几种导航钩子"}},[e._v("#")]),e._v(" 55. vue-router 有哪几种导航钩子？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v(" 三种，\n\n 第一种：是全局导航钩子：router.beforeEach(to,from,next)，作用：跳转前进行判断拦截。\n 第二种：组件内的钩子\n 第三种：单独路由独享组件\n")])])]),a("h3",{attrs:{id:"_56-scss-是什么-在-vue-cli-中的安装使用步骤是-有哪几大特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_56-scss-是什么-在-vue-cli-中的安装使用步骤是-有哪几大特性"}},[e._v("#")]),e._v(" 56. scss 是什么？在 vue.cli 中的安装使用步骤是？有哪几大特性？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v(" css的预编译。\n\n 使用步骤：\n\n 第一步：用npm 下三个loader（sass-loader、css-loader、node-sass）\n\n 第二步：在build目录找到webpack.base.config.js，在那个extends属性中加一个拓展.scss\n\n 第三步：还是在同一个文件，配置一个module属性\n\n 第四步：然后在组件的style标签加上lang属性 ，例如：lang=”scss”\n\n 有哪几大特性:\n\n 1、可以用变量，例如（$变量名称=值）；\n 2、可以用混合器，例如（）\n 3、可以嵌套\n")])])]),a("h3",{attrs:{id:"_57-vue-loader-是什么-使用它的用途有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_57-vue-loader-是什么-使用它的用途有哪些"}},[e._v("#")]),e._v(" 57. vue-loader 是什么？使用它的用途有哪些？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v(" 解析.vue文件的一个加载器，跟template/js/style转换成js模块。\n\n 用途：js可以写es6、style样式可以scss或less、template可以加jade等\n")])])]),a("h3",{attrs:{id:"_58-vue-如何实现按需加载配合-webpack-设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_58-vue-如何实现按需加载配合-webpack-设置"}},[e._v("#")]),e._v(" 58. vue 如何实现按需加载配合 webpack 设置?")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v(" webpack中提供了require.ensure()来实现按需加载。以前引入路由是通过import 这样的方式引入，改为const定义的方式进行引入。\n 不进行页面按需加载引入方式：import home from '../../common/home.vue'\n 进行页面按需加载的引入方式：\n const home = r => require.ensure( [], () => r (require('../../common/home.vue')))\n")])])]),a("h3",{attrs:{id:"_59-1-vuex-是什么-怎么使用-哪种功能场景使用它"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_59-1-vuex-是什么-怎么使用-哪种功能场景使用它"}},[e._v("#")]),e._v(" 59. （1）vuex 是什么？怎么使用？哪种功能场景使用它？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v(" vue框架中状态管理。在main.js引入store，注入。新建一个目录store，…… export 。场景有：单页应用中，组件之间的状态。音乐播放、登录状态、加入购物车\n")])])]),a("h3",{attrs:{id:"_60-聊聊你对-vue-js-的-template-编译的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_60-聊聊你对-vue-js-的-template-编译的理解"}},[e._v("#")]),e._v(" 60. 聊聊你对 Vue.js 的 template 编译的理解？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v(" 答：简而言之，就是先转化成AST树，再得到的render函数返回VNode（Vue的虚拟DOM节点）\n 详情步骤：\n 首先，通过compile编译器把template编译成AST语法树（abstract syntax tree 即 源代码的抽象语法结构的树状表现形式），compile是createCompiler的返回值，createCompiler是用以创建编译器的。另外compile还负责合并option。\n 然后，AST会经过generate（将AST语法树转化成render funtion字符串的过程）得到render函数，render的返回值是VNode，VNode是Vue的虚拟DOM节点，里面有（标签名、子节点、文本等等）\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);